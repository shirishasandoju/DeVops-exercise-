PROGRAM FOR BUBBLE SORT IN JAVA

public class Bubble {
//function to print array elements
static void print(int a[])
{
int n = a.length;

//int i;
for(int i=0;i<n;i++)
{
System.out.println(a[i]+ "");
}
}
//function to implment bubble sort
static void bubbleSort(int a[])
{
int n = a.length;
int i,j,temp;
for(i=0;i<n;i++)
{
for(j=i+1;j<n;j++)
{
if(a[j]<a[i])
{// for swapping
temp = a[i];
a[i] = a[j];
a[j] = temp;
}
}
}
}

//driver method

public static void main(String[] args) {
int a[] = {35, 10, 31, 11, 26};
Bubble b1 = new Bubble();
System.out.println("Before Sorting...");
b1.print(a);
b1.bubbleSort(a);
System.out.println();
System.out.println("After Sorting...");
b1.print(a);
}
}

PROGRAM FOR MERGE SORT IN JAVA:

class MergeSort {
	// Merges two subarrays of arr[].
	// First subarray is arr[l..m]
// left to mid -> mid+1  to Right 
// 23 45 67 78 90
// 3-0+1 = 2
// 5-3 =2
	// Second subarray is arr[m+1..r]
	void merge(int arr[], int l, int m, int r)
	{
		// Find sizes of two subarrays to be merged
		int n1 = m - l + 1;
		int n2 = r - m;

		/* Create temp arrays */
		int L[] = new int[n1];
		int R[] = new int[n2];

		/*Copy data to temp arrays*/
		for (int i = 0; i < n1; ++i)
			L[i] = arr[l + i];
		for (int j = 0; j < n2; ++j)
			R[j] = arr[m + 1 + j];

		/* Merge the temp arrays */

		// Initial indexes of first and second subarrays
		int i = 0, j = 0;

		// Initial index of merged subarray array
		int k = l;
		while (i < n1 && j < n2) {
			if (L[i] <= R[j]) {
				arr[k] = L[i];
				i++;
			}
			else {
				arr[k] = R[j];
				j++;
			}
			k++;
		}

		/* Copy remaining elements of L[] if any */
		while (i < n1) {
			arr[k] = L[i];
			i++;
			k++;
		}

		/* Copy remaining elements of R[] if any */
		while (j < n2) {
			arr[k] = R[j];
			j++;
			k++;
		}
	}

	// Main function that sorts arr[l..r] using
	// merge()
	void sort(int arr[], int l, int r)
	{
		if (l < r) {
			// Find the middle point
			int m = l + (r - l) / 2;

			// Sort first and second halves
			sort(arr, l, m);
			sort(arr, m + 1, r);

			// Merge the sorted halves
			merge(arr, l, m, r);
		}
	}

	/* A utility function to print array of size n */
	static void printArray(int arr[])
	{
		int n = arr.length;
		for (int i = 0; i < n; ++i)
			System.out.print(arr[i] + " ");
		System.out.println();
	}

	// Driver code
	public static void main(String args[])
	{
		int arr[] = { 12, 11, 13, 5, 6, 7 };

		System.out.println("Given Array");
		printArray(arr);

		MergeSort ob = new MergeSort();
		ob.sort(arr, 0, arr.length - 1);

		System.out.println("\nSorted array");
		printArray(arr);
	}
}

PROGRAM FOR SELECTION SORT IN JAVA:

public class SelectionSort
{
void selection(int a[]) /* function to sort an array with selection sort */
{
int i, j, small;
int n = a.length;
for (i = 0; i < n; i++)
{
small = i; //minimum element in unsorted array
// i=23 j=45
// 23 45 8 9
//8 45 23 9
for (j = i+1; j < n; j++)
if (a[j] < a[small])
small = j;
// Swap the minimum element with the first element
int temp = a[small];
a[small] = a[i];
a[i] = temp;
}

}
void printArr(int a[]) /* function to print the array */
{
int i;
int n = a.length;
for (i = 0; i < n; i++)
System.out.print(a[i] + " ");
}

public static void main(String[] args) {
int a[] = { 91, 49, 4, 19, 10, 21 };
SelectionSort i1 = new SelectionSort();
System.out.println("\nBefore sorting array elements are - ");
i1.printArr(a);
i1.selection(a);
System.out.println("\nAfter sorting array elements are - ");
i1.printArr(a);
System.out.println();
}
}

PROGRAM FOR INSERTION SORT IN JAVA:

public class Insert
{
void insert(int a[]) /* function to sort an aay with insertion sort */
{
int i, j, temp;
int n = a.length;
for (i = 1; i < n; i++) {
temp = a[i];
j = i - 1;

while(j>=0 && temp <= a[j]) /* Move the elements greater than temp to one position ahead from their current position*/
{
a[j+1] = a[j];
j = j-1;
}
a[j+1] = temp;
}
}
void printArr(int a[]) /* function to print the array */
{
int i;
int n = a.length;
for (i = 0; i < n; i++)
System.out.print(a[i] + " ");
}

public static void main(String[] args) {
int a[] = { 92, 50, 5, 20, 11, 22 };
Insert i1 = new Insert();
System.out.println("\nBefore sorting array elements are - ");
i1.printArr(a);
i1.insert(a);
System.out.println("\n\nAfter sorting array elements are - ");
i1.printArr(a);
System.out.println();
}
}
